[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0",
            "cython", "extension-helpers",
            "numpy>=1.24,<2"]
build-backend = "poetry.core.masonry.api"


[project]
name = "lco-banzai"
requires-python = ">=3.10,<4"
version = "1.27.0"
description = "Python data reduction package for LCOGT data"

authors = [
  { name="Curtis McCully", email="cmccully@lco.global" },
]
license = {text="GPL-3.0-or-later"}
readme = "README.rst"
keywords = ["astronomy", "reduction", "LCOGT"]
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Operating System :: OS Independent"
]
dependencies = [
  "astropy (>=5,<7)",
  "scipy",
  "sqlalchemy>=1.3.0b1",
  "logutils",
  "numpy>=1.24,<2",
  "cython",
  "lcogt_logging",
  "photutils",
  "bottleneck",
  "requests",
  "opensearch-py",
  "pytest>=4.0",
  "pyyaml",
  "psycopg2-binary",
  "celery[redis]>=5.5.0rc5",
  "apscheduler",
  "ocs_ingester>=3.0.4,<4.0.0",
  "tenacity>=8.5",
  "python-dateutil",
  "emcee",
  "scikit-image",
  "cosmic-conn>=0.2.8",
  "mock",
  'extension-helpers',
  "torch",
  # Not strictly needed to run the code. This is only to build the Mac (arm)
  # version since wheels exist for this version.
  "numcodecs (<0.16.0) ; python_version < '3.11'",
  "numcodecs (>=0.16.0) ; python_version >= '3.11'",
]

[tool.poetry.group.otel]
optional = true

[tool.poetry.group.otel.dependencies]
opentelemetry-distro = "^0.55b1"
opentelemetry-api = "^1.34.1"
opentelemetry-sdk = "^1.34.1"
opentelemetry-exporter-otlp-proto-http = "^1.34.1"
opentelemetry-exporter-otlp-proto-grpc = "^1.34.1"
opentelemetry-instrumentation-celery = "^0.55b1"

[project.optional-dependencies]
test = [
    "pytest>=4.0",
    "coverage",
    "pytest-astropy"
]
docs = [
    "sphinx-astropy",
    "sphinx_rtd_theme",
    "sphinx-pyproject",
    "sphinx-autobuild",
    "nbsphinx",
    "ipykernel",
]

cpu = ["torch"]
cuda = ["torch"]

style = ["pycodestyle"]

[project.urls]
"Source" = "https://github.com/lcogt/banzai"
"Docs" = "https://banzai.readthedocs.io/en/latest/"


[tool.poetry]
packages = [
  { include = "banzai" }
]
include = [
    { path = "**/*.so", format = "wheel" },
]

[tool.poetry.dependencies]
torch = [
    { markers = "sys_platform == 'darwin'", source = "PyPI"},
    { markers = "sys_platform != 'darwin' and extra == 'cpu' and extra != 'cuda'", source = "pytorch-cpu"},
    { markers = "sys_platform != 'darwin' and extra == 'cuda' and extra != 'cpu'", source = "pytorch-cuda"},
 ]

[[tool.poetry.source]]
name = "pytorch-cuda"
url = "https://download.pytorch.org/whl/cu121"
priority = "explicit"

[[tool.poetry.source]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[tool.poetry.build]
script = "build.py"

[tool.setuptools.packages.find]
include = ["banzai*"]

[tool.setuptools]
zip-safe = false

[tool.setuptools.package-data]
"banzai.tests" = ["data/*"]

[project.scripts]
    banzai_reduce_individual_frame = "banzai.main:reduce_single_frame"
    banzai_reduce_directory = "banzai.main:reduce_directory"
    banzai_make_master_calibrations = "banzai.main:make_master_calibrations"
    banzai_automate_stack_calibrations = "banzai.main:start_stacking_scheduler"
    banzai_run_realtime_pipeline = "banzai.main:run_realtime_pipeline"
    banzai_mark_frame_as_good = "banzai.main:mark_frame_as_good"
    banzai_mark_frame_as_bad = "banzai.main:mark_frame_as_bad"
    banzai_update_db = "banzai.main:update_db"
    banzai_add_instrument = "banzai.main:add_instrument"
    banzai_add_site = "banzai.main:add_site"
    banzai_add_super_calibration = "banzai.main:add_super_calibration"
    banzai_populate_bpms = "banzai.main:add_bpms_from_archive"
    banzai_create_db = "banzai.main:create_db"
    banzai_create_local_db = "banzai.main:create_local_db"

[tool.coverage.run]
source = ["banzai"]
omit = [
  "banzai/_astropy_init*",
  "banzai/conftest*",
  "banzai/cython_version*",
  "banzai/setup_package*",
  "banzai/*/setup_package*",
  "banzai/*/*/setup_package*",
  "banzai/tests/*",
  "banzai/*/tests/*",
  "banzai/*/*/tests/*",
  "banzai/version*"
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "except ImportError",
  "raise AssertionError",
  "raise NotImplementedError",
  "def main\\(.*\\):",
  "pragma: py{ignore_python_version}"
]
